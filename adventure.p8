pico-8 cartridge // http://www.pico-8.com
version 33
__lua__
p = {{x=32,y=5,xv=0, yv=0, 
 hrot=.375,hrotv=0,near=0,far=2.125,fov=.12}}
--near -> ground curvature
 --far -> height?
 --fov -> viewing angle
 map_bounds_x = 128
map_bounds_y = 64

input_x = 0
input_y = 0
dir_stack = {}
old_input = 0
movement_lock = false
pivot_lock = false
camera_lock = false
d_angle = 0
debug_val = 0

scale = -8

trees = {}
tree = {
	x = 0,
	y = 0,
	dist = 0,
	scx = 0,
	scy = 0
}

function tree:new(x,y)
	local obj = {
		x = x,
		y = y,
		base = self
	}
	add(trees,obj)
	return setmetatable(obj, {__index = self})
end

function tree:draw(pn)
	local near, far, fov =
		 p[pn].near, p[pn].far, p[pn].fov
	local size = (far+1.4-near)*cos(fov)/(self.dist-near*cos(fov))+0.1
	local width = 32*size
	local height = 64*size
	sspr(24,32,32,32,self.scx-0.5*width,self.scy-height+3,width,height,self.f)
end

guys = {}
guy = {
	x = 0,
	y = 0,
	dist = 0,
	scx = 0,
	scy = 0,
	angle = 0,
	d = 0,
	f = 0,
	a = 0,
	s = 2,
	talkable = false}

function guy:new(x,y,angle)
	local obj = {
		x = x,
		y = y,
		dx = x,
		dy = y,
		angle = angle,
		base = self
	}
	add(guys,obj)
	return setmetatable(obj, {__index = self})
end

function guy:update()
	if self.dx != self.x or self.dy != self.y then
		local fx = self.x+0.04*sgn(self.dx-self.x)
		local fy = self.y+0.04*sgn(self.dy-self.y)

		if find_distance2({x = self.dx, y = self.dy},self) < 0.02 then
			self.x = self.dx
			self.y = self.dy
		else
			if find_distance2(player,{x = fx, y = self.y}) > 0.1 then
				self.x = fx
			end
			if find_distance2(player,{x = self.x, y = fy}) > 0.1 then
				self.y = fy
			end
		end
		
	end

	if btn(4) then
	self.angle = pivot_angle(self.angle,(btn(0) and 1 or 0) - (btn(1) and 1 or 0),0.004)
	end

	self.d = find_direction(self.angle)

	if self.dx != self.x or self.dy != self.y then --if player is moving
		self.a = (self.a%4)+0.1
	else
		self.a = 0
	end

	if self.d <= 1 then
		self.f = (self.d == 1)
		self.s = (self.a > 2 and 12 or 14)
		if self.a == 0 then 
			self.s = 10 
		end
	elseif self.d == 2 then
		self.f = (self.a > 2)
		self.s = (self.a == 0 and 6 or 8)
		
	elseif self.d == 3 then
		self.f = (self.a > 2)
		self.s = (self.a == 0 and 2 or 4)
	end
end

function guy:draw(pn)
	local near, far, fov =
		 p[pn].near, p[pn].far, p[pn].fov
	local size = (far+1.4-near)*cos(fov)/(self.dist-near*cos(fov))+0.1
	local width = 16*size
	local height = 32*size
	sspr(self.s*8,0,16,32,self.scx-0.5*width,self.scy-height+3,width,height,self.f)
	if self.talkable then
	 sspr(0,24,8,8,self.scx-0.25*width,self.scy-height*1.2,size*8,size*8)
	end
end

function _init()
	palt(0,false)
	palt(14,true)
	pal(7,-14,1)
	pal(8,-3,1)
	pal(15,-16,1)
	pal(12,-11,1)
	poke(0x5f5c,-1)

	toggle_camera = function()
		camera_lock = not camera_lock
		if camera_lock then
			menuitem(1,"lock camera")
		else
			menuitem(1,"unlock camera")
		end
	end
	menuitem(1,"lock camera", toggle_camera)

	guy:new(32,1,0.1)
	guy:new(32,4,-0.4)
	tree:new(24,8)
	tree:new(25,6)
	tree:new(27,8)

	initialize_scripts()
	
	p[1].x = -cos(p[1].hrot)*player.dist + player.x
	p[1].y = -sin(p[1].hrot)*player.dist + player.y
end

function _update60()
	--controls + debug
	--[[
	if btn(4) and btn(5) then
		--if (btn(2)) hz += 1/16
		--if (btn(3)) hz -= 1/16
	elseif btn(‚ùé) then --x
		--if (btn(‚¨ÜÔ∏è)) scale_y += 1
		--if (btn(‚¨áÔ∏è)) scale_y -= 1
		--if (btn(‚¨ÖÔ∏è)) scale_x -= 1
		--if (btn(‚û°Ô∏è)) scale_x += 1
	elseif btn(üÖæÔ∏è) then --z
		if (btn(‚¨ÜÔ∏è)) p[1].fov +=  1/256 
		if (btn(‚¨áÔ∏è)) p[1].fov -=  1/256
		if (btn(‚¨ÖÔ∏è)) p[1].near += 1/32
		if (btn(‚û°Ô∏è)) p[1].near -= 1/32
	else

		if btn(‚¨ÜÔ∏è) then
			p[1].xv += cos(p[1].hrot)*.05
			p[1].yv += sin(p[1].hrot)*.05
		end
		if btn(‚¨áÔ∏è) then
			p[1].xv -= cos(p[1].hrot)*.05
			p[1].yv -= sin(p[1].hrot)*.05
		end
		if (btn(‚¨ÖÔ∏è))p[1].hrotv -= 0.002--1/5
		if (btn(‚û°Ô∏è))p[1].hrotv += 0.002--1/5
	end
	--mset(p[1].x-cos(p[1].hrot)*p[1].far*1.45,p[1].y-sin(p[1].hrot)*p[1].far*1.45,17)
	--player character collision
	local fx = p[1].x+cos(p[1].hrot+p[1].hrotv)*p[1].far*1.45 + p[1].xv
	local fy = p[1].y+sin(p[1].hrot+p[1].hrotv)*p[1].far*1.45 + p[1].yv
	if fx < 0 or fx >= 128 or fget(mget(fx,p[1].y+sin(p[1].hrot)*p[1].far*1.45),0) then p[1].hrotv = 0 p[1].xv = 0 end
	if fy < 0 or fy >= 64 or fget(mget(p[1].x+cos(p[1].hrot)*p[1].far*1.45,fy),0) then p[1].hrotv = 0 p[1].yv = 0 end
	--player motion
	p[1].x += p[1].xv
	p[1].y += p[1].yv
	p[1].hrot = norm_angle(p[1].hrot+p[1].hrotv)
	p[1].xv = 0
	p[1].yv = 0
	p[1].hrotv = 0 ]]
	local vx,vy = 0,0
	local px,py = player.x, player.y

	--directional input
	local d = update_input()

	if (d == nil) then input_x = 0 input_y = 0 end
	if (d == 0) then input_x = -1 input_y = 0 end
	if (d == 1) then input_x = 1 input_y = 0 end
	if (d == 2) then input_x = 0 input_y = 1 end
	if (d == 3) then input_x = 0 input_y = -1 end

	--player animation
	player:update()

	local tree_dist = 1
	local closest_tree = nil
	for t in all(trees) do
		dist2 = find_distance2(player,t)
		if dist2 < tree_dist then
			tree_dist = dist2
			closest_tree = t
		end
	end
	
	local closest = 1
	local closest_guy = nil
	for g in all(guys) do
		dist2 = find_distance2(player,g)
		g.talkable = false
		if dist2 < closest then
			closest = dist2
			closest_guy = g
		end

		g:update()
	end
	if (closest_guy) closest_guy.talkable = true

	if btnp(5) and closest_guy and closest_guy.script and not script_active then
		local look_at_each_other = atan2(closest_guy.x-px,closest_guy.y-py)-p[1].hrot
		closest_guy.angle = norm_angle(look_at_each_other+0.5)
		player.angle = norm_angle(look_at_each_other)
		script_run(closest_guy.script)
	end

	if script_active then
		script_update()
	end
	movement_lock = script_active
	
	if btn(4) and not pivot_lock and not camera_lock then
		p[1].hrot = pivot_angle(p[1].hrot,(btn(1) and 1 or 0) - (btn(0) and 1 or 0),0.004)
		p[1].x = -cos(p[1].hrot)*player.dist + px
		p[1].y = -sin(p[1].hrot)*player.dist + py
		if not movement_lock then
			vx = cos(p[1].hrot)*0.05*((btn(2) and 1 or 0) - (btn(3) and 1 or 0))
			vy = sin(p[1].hrot)*0.05*((btn(2) and 1 or 0) - (btn(3) and 1 or 0))
		end
	elseif not movement_lock and input_y != 0 then
		vx = cos(p[1].hrot)*0.05*input_y
		vy = sin(p[1].hrot)*0.05*input_y
	elseif not movement_lock and input_x != 0 then
			vx = sin(p[1].hrot)*0.05*input_x
			vy = -cos(p[1].hrot)*0.05*input_x
	end
	
	local fx = px + vx --future x
	local fy = py + vy --future y

	if fx >= 0 and fx < 128 and fget(mget(fx,py),0) and (closest_guy == nil or find_distance2({x = fx,y = py},closest_guy) > .1) and (closest_tree == nil or find_distance2({x = px,y = fy},closest_tree) > .2) then
		 player.x = fx 
		 if (not camera_lock) p[1].x += vx 
	end
	if fy >= 0 and fy < 64 and fget(mget(px,fy),0) and (closest_guy == nil or find_distance2({x = px,y = fy},closest_guy) > .1) and (closest_tree == nil or find_distance2({x = px,y = fy},closest_tree) > .2) then 
		player.y = fy 
		if (not camera_lock) p[1].y += vy 
	end

	cpu = stat(1)
end 

function _draw()
	fillp()
	rectfill(0,0,127,49,2)
	fillp(0xa5a5)
	rectfill(0,10,127,19,0x82)
	
	fillp(0xa0a0)
	rectfill(0,35,127,39,0x72)
	fillp(0xa5a5)
	rectfill(0,40,127,49,0x72)
	fillp(0xa0a0)
	rectfill(0,50,127,54,0x27)
	fillp()
	rectfill(0,55,127,84,7)
	fillp(0xa0a0)
	rectfill(0,85,127,89,0x07)
	fillp(0xa5a5)
	rectfill(0,90,127,109,0x07)
	fillp(0xa0a0)
	rectfill(0,110,127,105,0x70)
	fillp()
	rectfill(0,110,127,127,0)
	--skybox
 	--draw_background(p[1].hrot)
	--drawing floor + other character
 	draw_track(1,0,32,128,96)
	--drawing player, always in center of room... unless???
	
	if text then
		rectfill(2,107,125,125,0)
		print(text, 3,108, text_color)
	end
	if responses then
		local top = 101 - 6 * #responses
		rectfill(70, top,
		         125, 105, 0)
		for i=1, #responses do
			print(responses[i],
			      72, top + i*6-4,
			      i==ans and 7 or 5)
		end
	end
	
	--debug
	print(stat(1),0,0,14)
	?p[1].hrot
	?tostr(debug_val,true)
	?#dir_stack
	for d in all(dir_stack) do
		?d
	end

end

--(index of table that represents camera info, topleft corner of screen xy, resolution in pixels xy)
function draw_track(pn,
	corner_x, corner_y, 
	xres, yres)
	 --local pl= p
		--local gx, gy, hrot, near, far, fov =
		--p[pn].x, p[pn].y, p[pn].hrot, p[pn].near, p[pn].far, p[pn].fov

	--(postion xy, angle,)
	local gx, gy, hrot,
	 near, far, fov =
		p[pn].x, p[pn].y, p[pn].hrot,
		 p[pn].near, p[pn].far, p[pn].fov
	
	local coshmf=cos(hrot-fov)
	local sinhmf=sin(hrot-fov)
	local coshpf=cos(hrot+fov)
	local sinhpf=sin(hrot+fov)
	
	local farx1 = gx+coshmf*far
	local fary1 = gy+sinhmf*far
	
	local nearx1 = gx+coshmf*near
	local neary1 = gy+sinhmf*near
	
	local farx2 = gx+coshpf*far
	local fary2 = gy+sinhpf*far
	
	local nearx2 = gx+coshpf*near
	local neary2 = gy+sinhpf*near
	
	--do as many calculations as possible outside the loop
	local v1,v2,v3,v4 = 
	farx1-nearx1,fary1-neary1,farx2-nearx2,fary2-neary2 

	local xshift = 7
	if(xres == 64) xshift = 6
	
	--draw horozontal lines top to bottom
	for y = 0, yres, 1 do
	
		local sampledepth = yres/(y-scale) -- (y-scale)	
	
		local startx = v1*sampledepth+nearx1
		local starty = v2*sampledepth+neary1
		local endx = v3*sampledepth+nearx2
		local endy = v4*sampledepth+neary2
			
		--draw distance/xres. used for mdx,mdy in tline
		local x1 = (endx-startx)>>xshift
		local y1 = (endy-starty)>>xshift

		--dont draw map tiles out of bounds
		if startx < -128 or startx >= 256 or starty < -128 or starty >= 256 or
		endx <-128 or endx >= 256 or endy < -128 or endy >= 256 then
			goto nextline
		end

		tline( 0, y+corner_y, xres, y+corner_y,
		startx, starty,
		x1, y1)
		::nextline::

		
	end

	local update_screen_position = function(g) 
		local dx = g.x-gx
		local dy = g.y-gy

		local theta = norm_angle(hrot - atan2(dx,dy))
		g.dist = sqrt(dx*dx+dy*dy)*cos(theta)
		g.scy = (far-near)*cos(fov)/(g.dist-near*cos(fov))*yres+scale+corner_y
		if g.scy >= corner_y and theta == mid(-fov-0.02,theta,fov+0.02) then
			local depth = (g.dist-near*cos(fov))/((far-near)*cos(fov))
			local sx = v1*depth+nearx1
			local ex = v3*depth+nearx2
			g.scx = ((g.x-sx)<<xshift)/(ex-sx)
			return true
		end
		return false
	end

	local zsort = {player}

	update_screen_position(player)

	for t in all(trees) do
		if update_screen_position(t) then

			for i = 1, #zsort do
				if t.dist >= zsort[i].dist then
					add(zsort,t,i)
				elseif i == #zsort then
					add(zsort,t)
				end
			end
		end
	end

	for guy in all(guys) do
		if update_screen_position(guy) then

			for i = 1, #zsort do
				if guy.dist >= zsort[i].dist then
					add(zsort,guy,i)
				elseif i == #zsort then
					add(zsort,guy)
				end
			end
		end
	end

	for z in all(zsort) do
		z:draw(pn)
	end
	
end

function draw_background(hrot)
		--
		--spr( 76, 95, 0, 4, 4 )
		--map( 0, 35, 63, 0, 8, 4 )
		rectfill( 0, 0, 127, 54, 56 )
		rectfill( 0, 56, 127, 14, 57 )
		line(0, 55, 127, 55, 8)
		--spr( 104, 63, 17, 8, 4 )
		rotation_ratio = 8
		m=flr(hrot<<rotation_ratio)%(8*2)
		--spr( 104, 0, 15, 4, 4 )
		sspr(64+m,0, 32-m,32, 0-m,0)
		if m~=0 then
		sspr(64,0, 2*m,32, 32-2*m,0)
	end
	for i = 0, 32 do
		adder = (i)<<6 //add 64
		memcpy(0x6000+adder+16, 0x6000+adder, 16 )
	end
	
	--copis 1/2 of whats in the screen to 2/2
	for i = 0, 32 do
		adder = (i)<<6 //add 64
		memcpy(0x6000+adder+32, 0x6000+adder, 32 )
	end
	
--rectfill( 0, 0, 127, 16, 8 )
--rectfill( 0, 0, 127, 16, 8 )
end



player = {x = 30,
y = 4,
s = 2, --sprite index
a = 0,  --animation timer
f = false, --flip flag
d = 3,  --direction index
dist = 2.85, --distance from camera
angle = 0,
scx = 64,
scy = 74}

function player:update()
	if btn(4) and not camera_lock and not pivot_lock then
		self.angle = pivot_angle(self.angle,(btn(0) and 1 or 0) - (btn(1) and 1 or 0),0.004)
		if (btn(2) or btn(3)) and not movement_lock then
			self.angle = (btn(2) and 0 or 0.5)
		end
	elseif not movement_lock then
		if (input_x != 0) self.angle = input_x>>2
		if (input_y != 0) self.angle = input_y-1>>2
	end

	self.d = find_direction(self.angle)
	
	if movement_lock then
		self.a = 0
	elseif btn(2) or btn(3) then
		self.a = (self.a%4)+0.1
	elseif btn(4) and (btn(0) or btn(1)) and not camera_lock and not pivot_lock then --if camera is pivoting
		self.a = 0
	elseif btn(0) or btn(1) then --if player is moving
		self.a = (self.a%4)+0.1
	else
		self.a = 0
	end
	
	if self.d <= 1 then
		self.f = (self.d == 1)
		self.s = (self.a > 2 and 12 or 14)
		if self.a == 0 then 
			self.s = 10 
		end
	elseif self.d == 2 then
		self.f = (self.a > 2)
		self.s = (self.a == 0 and 6 or 8)
		
	elseif self.d == 3 then
		self.f = (self.a > 2)
		self.s = (self.a == 0 and 2 or 4)
		
	end
end

function player:draw()
	local near, far, fov =
		 p[1].near, p[1].far, p[1].fov
	local size = (far+1.4-near)*cos(fov)/(self.dist-near*cos(fov))+0.1
	local width = 16*size
	local height = 32*size

	pal(2,5)
	sspr(self.s*8,0,16,32,self.scx-0.5*width,self.scy-height+3,width,height,self.f)
	pal(2,2)
end

function pivot_angle(a,dir,alpha)
	return norm_angle(a+dir*0.004)
end

function norm_angle(a)
	return (a+0.5)%1-0.5
end

function find_distance2(a,b)
	return (a.x-b.x)^2+(a.y-b.y)^2
end

function find_direction(a)
	if a == mid(-0.125,a,0.125) then
		return 2
	elseif a != mid(-0.375,a,0.375) then
		return 3
	elseif a == mid(0.125,a,0.375) then
		return 1
	elseif a == mid(-0.125,a,-0.375) then
		return 0
	end
end

function update_input()
	local dir_input = btn() & 0x000f
	if dir_input != old_input then
		local buffer = dir_input
		dir_input = dir_input ^^ old_input
		old_input = buffer
		debug_val = dir_input
		if #dir_stack == 0 then
			for i = 0,3 do
				if btn(i) then
					add(dir_stack,i)
				end
			end
		else
			local push_else_pop = false
			for i = 0,3 do
				if dir_input & (0x0001<<i) != 0 then
					local input = i
					push_else_pop = btn(i)
					if push_else_pop then
						add(dir_stack,input)
					else
						del(dir_stack,input)
					end
				end	
			end
		end
	end
	if (#dir_stack == 0) return nil
	return dir_stack[#dir_stack]
end
-->8
--dialogue by geckojsc

--scripting variables
text = nil
text_color = 15
responses = nil
ans = 1
routine = nil
script_active = false

-- initiate a script
function script_run(func)
	routine = cocreate(function()
		script_active = true
		func()
		script_active = false
	end)
	coresume(routine)
end

-- this is called every frame
-- and player input is ignored,
-- as long as there is a script
-- active.
function script_update()
	coresume(routine)
end

-- script commands
-------------------------------

function reveal_text(str)
	text = ""
	for i=1, #str do
		text = text..sub(str,i,i)
		yield()
	end
end

function say(str)
	reveal_text(str)
	repeat
	 -- every time we call yield()
	 -- we're saying "that's all
	 -- for now, come back here
	 -- next frame"
		yield()
	until btnp(5)
	text = nil
end

function announce(str)
	text = str
	text_color = 12
	repeat
		yield()
	until btnp(5)
	text = nil
	text_color = 7
end

function ask(str, ...)
	reveal_text(str)
	responses = {...}
	ans = 1
	repeat
		yield()
		if btnp(2) and ans > 1 then
			ans -= 1
		elseif btnp(3) and ans < #responses then
			ans += 1
		end
	until btnp(5)
	text = nil
	responses = nil
end

function moveto(npc,x,y)
	npc.dx = x
	npc.dy = y
	npc.angle = norm_angle(atan2(npc.x-x,npc.y-y)+0.5-p[1].hrot)
	-- wait until npc reaches destination
	repeat
		yield()
	until actor_at_dest(npc)
end

function moveby(npc,dx,dy)
	moveto(npc, npc.dx+dx, npc.dy+dy)
end

function actor_at_dest(t)
	return t.dx == t.x and t.dy == t.y
end

-- execute multiple script
--  functions at once.
-- the main script resumes once
--  all functions are complete
function simultaneously(...)
	local routines = {}
	for f in all{...} do
		add(routines, cocreate(f))
	end
	repeat
		yield()
		local complete = true
		for c in all(routines) do
			if coresume(c) then
			 complete = false
			end
		end
	until complete
end

function initialize_scripts()
	guys[1].script = function ()
		say [[
	whew, desert patrol is hard
	work!]]
		moveby(guys[1],0,2)
	end
end
__gfx__
00000000f4ffffffeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00000000fffff4ffeeeeeee000eeeeeeeeeeeeeeeeeeeeeeeeeeeee000eeeeeeeeeeeee000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00700700ffffff4feeeeee04440eeeeeeeeeee000eeeeeeeeeeeee09440eeeeeeeeeee09440eeeeeeeeee0000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
00077000fffff4ffeeeeee09440eeeeeeeeee04440eeeeeeeeeeee04440eeeeeeeeeee04440eeeeeeeee094440eeeeeeeeeeeeeeeeeeeeeeeeee0000eeeeeeee
00077000fff4ffffeeeeee02220eeeeeeee0009440eeeeeeeeeeee04440eeeeeeeeeee04440eeeeeeeee022440eeeeeeeeeee0000eeeeeeeeee094440eeeeeee
00700700ffffffffeee0000dd00000eeee0440222000eeeeeeee000444000eeeeeee000444000eeeeeee0d02440eeeeeeeee094440eeeeeeeee0224440eeeeee
000000004fffffffee044400d004444ee04440dd00440eeeeee04404440440eeeee04400400440eeeeee0d024440eeeeeeee0224440eeeeeeee0d024440eeeee
00000000fffff4ffe04444400044440ee044440d004444eeeee44440404444eeee044444044400eeeeeee0040040eeeeeeee0d024440eeeeeee0d024040eeeee
eeeeeeee4eeeeeeee0444440d044440ee0444400044440eeee0044440444000eee0004444440220eeeeee04044040eeeeeee0d0240040eeeeeee00000040eeee
eeeeeeee44eeeeeee00044440444000ee000440d040040eeee0220444440220eee0440000000220eeeee044444400eeeeeeee00440e0eeeeeeee0444400eeeee
eeeeeeee4eeeeeeee02200044400020ee0d0044040d000eeee0000000000000eee0d00222220000eeeee04444440eeeeeeeee400440eeeeee0e044444440eeee
eeeeeeee44eeeeeee02202200020020ee0d0200440ddd0eeee0440222220040eee0d00022200eeeeeeee00044400eeeeee0ee0440440eeee0d0044444400eeee
eeeeeeee4e4eeeeee02202222220020eee0e0220000dd0eee09d000000000d0eee4900000000eeeeeeee0220000eeeeee0d004440440eeee0dd200000020eeee
ee4eeeee44eeeeeee02200499940020eeeee049944000eeee09000499440090eee0000449940eeeeeeeee020220eeeeee0dd2040000eeeeee02202220220eeee
e4e4e44e4eeeeeeee00002222220000eeeee00222000eeeeee00e0200002040eeeee02000022eeeeeeee090d020eeeeeee0d2200220eeeeeee000990d20eeeee
444444444eeeeeeeee0dd2222220dd0eeee222222220eeeeeeee0022222200eeeeee202222220eeeeeee202dd0eeeeeeeee0049940eeeeeeeeee000dd20eeeee
44444444eeeeeee4ee0dd222202000eeeee0222222220eeeeeee022222220eeeeeee022222220eeeeeee0222220eeeeeeeee0002002eeeeeeeee022000eeeeee
e4e4e44eeeeeee44eeee022220220eeeeee0222222020eeeeeee022222220eeeeeee022022220eeeeeee0222220eeeeeeeee0222220eeeeeeeee022220eeeeee
ee4eeeeeeeeeeee4eeee022220220eeeee00220222020eeeeeee022222220eeeeeee022022220eeeeeee0220220eeeeeeee02222220eeeeeeee0222220eeeeee
eeeeeeeeeeeeee44eee0222220220eeeee00220222200eeeeeee0202220222eeeeee0220220220eeeeee02202220eeeeee0222220220eeeeee022222220eeeee
eeeeeeeeeeeee4e4eee2220222020eeeee02222000200eeeeee22202220220eeeee22222004000eeeee022202220eeeeee02222202220eeeee020220220eeeee
eeeeeeeeeeeeee44eee0220222022eeeee022220440eeeeeeee02202220220eeeee022220400eeeeeee022202220eeeeee02202220220eeeee0202220220eeee
eeeeeeeeeeeeeee4eee0220200000eeeee00222000eeeeeeeee02202220220eeeee022020440eeeeeee002022220eeeeee02202222000eeeee02202220020eee
eeeeeeeeeeeeeee4eee0000004400eeeeee00000eeeeeeeeeee02202000000eeeee02202000eeeeeeeeee0002220eeeeee0002022040eeeeee0200002220eeee
ee0000ee00000000eeee04400440eeeeeeee0440eeeeeeeeeee0000000440eeeeee022000eeeeeeeeeeee0040000eeeeeee04000044400eeee00440e00440eee
e088880e00000000eeee04400400eeeeeeee0440eeeeeeeeeeeee04400440eeeeeee00040eeeeeeeeeeee000440eeeeeeee040eee000440eeee0400eee0440ee
0880088000000000eeee000000400eeeeeee0000eeeeeeeeeeeee04000000eeeeeeeee000eeeeeeeeeeee090400eeeeeeee000eeeee0040eeee0440ee0440eee
0880088000000000eeee0400044000eeeeee04000000eeeeeeeee00400440eeeeeeeee040000eeeeeeee09404400eeeeee0440eeeeee090eeee0940ee000eeee
0888888000000000eee009400044000eeee00440000000eeeeee0094000400eeeeeee004400000eeeeee000094000eeee0440eeeeeee00eeee094000000000ee
0880088000000000eee004000000000eeee009900000000eeeee09940044000eeeeee0044000000eeeeee00944000eeee00000000000000eee0000000000000e
e088880e00000000eee009900000000eeee000000000000eeeee00440000000eeeeee0000000000eeeeeee000000eeeeeee00000000000eeeee000000000eeee
ee0000ee00000000eeee0000000000eeeeee0000000000eeeeeee000000000eeeeeeee0000000eeeeeeeeeee000eeeeeeeeee0000000eeeeeeeee00000eeeeee
cfcccffffffffffffffccccceeeeeeee0e000eeeeeeee00500eeeeee000000000000000000000000000000000000000000000000000000000000000000000000
cccffffeefefeffeefffffccee00eeee00000ee00eeee0050eeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
ccffefeeeefeeeeeeefefffcee000ee00e000ee00eeee000eeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
cfffeeeeeeeeeeeeeeeefffceee050e0ee050ee00eee0000eeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
cffeeeeeeeeeeeeeeeeeeffceee050e0ee000ee000e0000eeeeeee00000000000000000000000000000000000000000000000000000000000000000000000000
ffeeeeeeeeeeeeeeeeeeeeffeee000e0eee000e0000050eeeeeee000000000000000000000000000000000000000000000000000000000000000000000000000
fefeeeeeeeeeeeeeeeeeefefeeee0500eee050ee00000eeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000
feeeeeeeeeeeeeeeeeeeeeefeeee0550eee000e00500e0eeee005000000000000000000000000000000000000000000000000000000000000000000000000000
feeeeeeeffcccccceeeeeeefeeee05000eee00005000000ee00500ee000000000000000000000000000000000000000000000000000000000000000000000000
ffeeeeeefcffcfcfeeeeeeffeee0005500eee0555050000000500eee000000000000000000000000000000000000000000000000000000000000000000000000
feeeeeeeccccffcfeeeeeeefe00550005000e00f5f5055005000eeee000000000000000000000000000000000000000000000000000000000000000000000000
ffeeeeeeffcffccceeeeeeffeee0eeee05500e0f5550f55000eeeeee000000000000000000000000000000000000000000000000000000000000000000000000
fefeeeeecccfcfcfeeeeefefee0eeeeee0500005f5500ff55500eeee000000000000000000000000000000000000000000000000000000000000000000000000
ffeeeeeecccccffceeeeeeffee0000eee0550055f500000f0000eeee000000000000000000000000000000000000000000000000000000000000000000000000
feeeeeeefccffccceeeeeeefeee0050ee00005555f000e0000eeeeee000000000000000000000000000000000000000000000000000000000000000000000000
feeeeeeecffccccceeeeeeefeeee0550eeee005f5f0eeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
feeeeeeeeeeeeeeeeeeeeeefeeeee050eee0005f5f0ee0eeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
fefeeeeeeeeeeeeeeeeeefefeeeee050ee0550f55f0000eeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
ffeeeeeeeeeeeeeeeeeeeeffeeeee055005000f55500eeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
cffeeeeeeeeeeeeeeeeeeffceeeeee005500e0f5f50eeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
cfffeeeeeeeeeeeeeeeefffceeeeeee0000ee0f5550eeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
ccffefeeeefeeeeeeefeffcceeeeeeeeeeeee0f5f50eeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
fccffffeefefeffeeffffccceeeeeeeeeeeee0f5f50eeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
cccccffffffffffffffccccceeeeeeeeeeeee0f5f50eeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000eeeeeeeeeeeee0f55f00eeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000eeeeeeeeeeee005555f0eeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000eeeeeeeeeee0055f5550eeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000eeeeeeeeee00f55f55f000eeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000eeeeeeeeee0005f5555f00eeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000eeeeeeeee00000fffff000eeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000eeeeeeeee00000000000000eeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000eeeeeeeee0000000000000eeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000142415151515151515150400000000000000151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
00000000000000000014141414141414140000000000001515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
00000000000000000000000000000000000000001515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
00000000000000000000000000000000000000151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
00000015151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
00151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
00151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
00151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515
__gff__
0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000616161610000000000000000006161616161616161616161616161616161610000000000000000000061616161616161616161616161616161615151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0000000062515151516061000000006161625151515151515151515151515151515151515000000000000000515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0000006251515151515151606161625151515151515151515151515151515151515151516000000000000051515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0000625151515151515151515151515151515151515151515151515151515151515151515150000000000051515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0052515151515151515151515151515151515151515151515151515151515151515151515150000000000051515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0052515151515151515151515151515151515151515151515151515151515151515151515150000000000051515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0052515151515151515151515151515151515151515151515151515151515151515151515150000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0052515151515151515151515151515151515151515151515151515151515151515151515150000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0052515151515151515151515151515151515151515151515151515151515151515151515160000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0062515151515151515151515151515151515151515151515151515151515151515151515151500000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515151515151515151515151500000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515151515151515151515151500000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515151515151515151515151500000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515151515151515151515151500000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515151515151515151515151500000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515151515151514042515140000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515151515140410000414100000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515151515100000000000000000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515151514000000000000000000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515151515000000000610000000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515151400000000062515000000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515140000000006251515000000000515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515150000000525151400000000051515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515150000000004141000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151515150000000000000000000515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151514000000000000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515151400000000000000000515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
5251515151515151515151515151515151515151515151515140000000000000000051515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0042515151515151515151515151515151515151515151404100000000000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0000414251515151515151515151515151515151515140000000000000005151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0000000042515151515151515151515151515151404100000000000051515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
0000000000414251515151515151515151514041000000000000515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151
